class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        return letsdoit(nums , target , 0 , 0);
    }
    public int letsdoit(int[] nums , int target , int idx , int sum){
        if(idx == nums.length){
            if(sum == target){
                return 1;
            }else{
                return 0;
            }
        }
        
        return letsdoit(nums , target , idx + 1 , sum + nums[idx]) + letsdoit(nums , target , idx + 1 , sum -nums[idx]);
    }
}



dp///////////////////////
class Solution 
{
    public int findTargetSumWays(int[] nums, int target) 
    {
        //Similar to find the total subsets count with given difference
        int n = nums.length;
        
        int sum = 0;
        for(int x: nums)
        {
            sum+=x;
        }
        
        if(target>sum || (target+sum)%2!=0)
            return 0;
        // S1 + S2 = Sum
        // S1 - S2 = target
        // S1 = (sum + target)/2
        
        int req_sum = (sum+target)/2;//Most Important
        
        return find(nums, n, req_sum);
    }
    
    public int find(int[] nums, int n, int sum)
    {
        //Initialisation
        int[][] dp = new int[n+1][sum+1];
        
        //Base-Case Transformation
        for(int i=0;i<sum+1;i++)
        {
            dp[0][i] = 0;
			}
        
        for(int i=0;i<n+1;i++)
        {
            dp[i][0] = 1;
        }
        
        //Main-Logic
        for(int i=1;i<n+1;i++)
        {
            for(int j=0;j<sum+1;j++)
            {
                if(nums[i-1]<=j)//Consider it
                {
                    dp[i][j] = dp[i-1][j-nums[i-1]] + dp[i-1][j];
                }
                else
                {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][sum];
    }
    
}
